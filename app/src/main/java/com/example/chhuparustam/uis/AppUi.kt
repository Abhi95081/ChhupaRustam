package com.example.chhuparustam.uis

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlin.random.Random

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppUI() {
    var userInput by remember { mutableStateOf("") }
    var normalMeaning by remember { mutableStateOf("") }
    var doubleMeaning by remember { mutableStateOf("") }
    var selectedCategory by remember { mutableStateOf("üçÜ Boys") }
    var expanded by remember { mutableStateOf(false) }

    // Categories with dirty lines
    val responses = mapOf(
        "üçÜ Boys" to listOf(
            "‡§§‡•á‡§∞‡§æ ‡§≤‡•å‡§°‡§º‡§æ ‡§Ü‡§ó ‡§≤‡§ó‡§æ ‡§¶‡•á‡§ó‡§æ ‡§Ö‡§Ç‡§¶‡§∞ ‡§ú‡§æ‡§§‡•á ‡§π‡•Ä üî•",
            "‡§§‡•á‡§∞‡§æ ‡§≤‡§Ç‡§° ‡§á‡§§‡§®‡§æ ‡§Æ‡•ã‡§ü‡§æ ‡§π‡•à ‡§ï‡§ø ‡§ö‡•Ç‡§§ ‡§´‡§ü ‡§ú‡§æ‡§è‡§ó‡•Ä üòà",
            "‡§§‡•á‡§∞‡§æ ‡§ñ‡§°‡§º‡§æ ‡§π‡•Å‡§Ü ‡§≤‡•å‡§°‡§º‡§æ ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Æ‡•Å‡§Å‡§π ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§®‡•Ä ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à üëÖ",
            "‡§á‡§§‡§®‡§æ ‡§∏‡§ñ‡•ç‡§§ ‡§≤‡•å‡§°‡§º‡§æ ‡§ö‡§æ‡§π‡§ø‡§è ‡§ï‡§ø ‡§™‡•Ç‡§∞‡•Ä ‡§∞‡§æ‡§§ ‡§ö‡•Ä‡§ñ ‡§®‡§ø‡§ï‡§≤ ‡§ú‡§æ‡§è üçÜ",
            "‡§§‡•á‡§∞‡•Ä ‡§ú‡§æ‡§Ç‡§ò‡•ã‡§Ç ‡§∏‡•á ‡§ü‡§ï‡§∞‡§æ‡§§‡§æ ‡§≤‡§Ç‡§° ‡§™‡§æ‡§ó‡§≤ ‡§ï‡§∞ ‡§¶‡•á‡§ó‡§æ üòè"
        ),
        "üçë Girls" to listOf(
            "‡§§‡•á‡§∞‡•Ä ‡§ö‡•Ç‡§§ ‡§ó‡•Ä‡§≤‡•Ä ‡§ï‡§∞‡§ï‡•á ‡§ö‡§æ‡§ü‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å üí¶",
            "‡§§‡•á‡§∞‡•á ‡§¶‡•Ç‡§ß ‡§¶‡§¨‡§æ‡§ï‡§∞ ‡§®‡§ø‡§™‡•ç‡§™‡§≤ ‡§ö‡•Ç‡§∏‡•Ç‡§Å‡§ó‡§æ üçí",
            "‡§§‡•á‡§∞‡•Ä ‡§ó‡§æ‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§•‡§™‡§ï‡•Ä ‡§Æ‡§æ‡§∞‡§ï‡§∞ ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§≠‡§∞‡§®‡§æ ‡§π‡•à üî•",
            "‡§§‡•á‡§∞‡•Ä ‡§∞‡§∏‡§¶‡§æ‡§∞ ‡§ö‡•Ç‡§§ ‡§∏‡•á ‡§Æ‡•Å‡§Å‡§π ‡§®‡§π‡•Ä‡§Ç ‡§π‡§ü‡•á‡§ó‡§æ üëÖ",
            "‡§§‡•á‡§∞‡•Ä ‡§¨‡•ã‡§§‡§≤ ‡§ú‡•à‡§∏‡•Ä ‡§ó‡§æ‡§Ç‡§° ‡§¶‡•á‡§ñ‡§ï‡•á ‡§≤‡§Ç‡§° ‡§î‡§∞ ‡§ñ‡§°‡§º‡§æ ‡§π‡•ã ‡§ó‡§Ø‡§æ üçë"
        ),
        "üí¶ Acts" to listOf(
            "‡§§‡•á‡§∞‡•á ‡§π‡•ã‡§Ç‡§† ‡§ö‡•Ç‡§∏‡§§‡•á-‡§ö‡•Ç‡§∏‡§§‡•á ‡§≤‡§Ç‡§° ‡§ó‡§∞‡§Æ ‡§ï‡§∞ ‡§¶‡•Ç‡§Å‡§ó‡§æ ü´¶",
            "‡§§‡•á‡§∞‡•Ä ‡§ö‡•Ç‡§§ ‡§Æ‡•á‡§Ç ‡§ú‡•Ä‡§≠ ‡§°‡§æ‡§≤‡§ï‡§∞ ‡§™‡§æ‡§®‡•Ä ‡§®‡§ø‡§ï‡§æ‡§≤‡•Ç‡§Å‡§ó‡§æ üëÖüí¶",
            "‡§§‡•á‡§∞‡•Ä ‡§ó‡§æ‡§Ç‡§° ‡§™‡§∞ ‡§•‡§™‡•ç‡§™‡§°‡§º ‡§Æ‡§æ‡§∞‡§§‡•á-‡§Æ‡§æ‡§∞‡§§‡•á ‡§î‡§∞ ‡§∏‡§ñ‡•ç‡§§ ‡§π‡•ã ‡§ú‡§æ‡§ä‡§Å‡§ó‡§æ üçë",
            "‡§§‡•á‡§∞‡•á ‡§®‡§ø‡§™‡•ç‡§™‡§≤ ‡§ö‡•Ç‡§∏‡§§‡•á-‡§ö‡•Ç‡§∏‡§§‡•á ‡§ö‡•Ç‡§§ ‡§≠‡•Ä ‡§ó‡•Ä‡§≤‡•Ä ‡§ï‡§∞ ‡§¶‡•Ç‡§Å‡§ó‡§æ üçí",
            "‡§§‡•á‡§∞‡•á ‡§¨‡§¶‡§® ‡§™‡§∞ ‡§≤‡§Ç‡§° ‡§∞‡§ó‡§°‡§º‡§ï‡§∞ ‡§™‡§æ‡§ó‡§≤ ‡§ï‡§∞ ‡§¶‡•Ç‡§Å‡§ó‡§æ üî•"
        )
    )

    // Emoji ‚Üí category map
    val emojiMap = mapOf(
        "üçÜ" to "üçÜ Boys",
        "ü•í" to "üçÜ Boys",
        "üåΩ" to "üçÜ Boys",

        "üçë" to "üçë Girls",
        "üçí" to "üçë Girls",
        "ü•≠" to "üçë Girls",
        "üå∏" to "üçë Girls",

        "üí¶" to "üí¶ Acts",
        "üëÖ" to "üí¶ Acts",
        "ü´¶" to "üí¶ Acts",
        "üî•" to "üí¶ Acts"
    )

    Scaffold(
        modifier = Modifier.fillMaxSize(),
        containerColor = Color.Transparent,
        topBar = {
            CenterAlignedTopAppBar(
                title = {
                    Text(
                        text = "ü§´ ChhupaRustam",
                        fontWeight = FontWeight.ExtraBold,
                        fontSize = 26.sp,
                        color = Color.White,
                        modifier = Modifier.graphicsLayer {
                            shadowElevation = 16f
                            renderEffect = null
                        }
                    )
                },
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = Color.Transparent
                )
            )
        }
    ) { innerPadding ->

        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    Brush.linearGradient(
                        listOf(Color(0xFF0F2027), Color(0xFF203A43), Color(0xFF2C5364))
                    )
                )
                .padding(innerPadding)
                .padding(16.dp)
        ) {
            Column(
                modifier = Modifier.fillMaxSize(),
                verticalArrangement = Arrangement.Top,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Input field
                OutlinedTextField(
                    value = userInput,
                    onValueChange = { userInput = it },
                    label = {
                        Text("üí¨ Enter emoji/text...", color = Color(0xFFBBDEFB))
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .clip(RoundedCornerShape(20.dp))
                        .background(Color.White.copy(alpha = 0.1f)),
                    shape = RoundedCornerShape(20.dp),
                    colors = OutlinedTextFieldDefaults.colors(
                        focusedBorderColor = Color.Cyan,
                        unfocusedBorderColor = Color.LightGray,
                        focusedLabelColor = Color.Cyan,
                        cursorColor = Color.Cyan
                    )
                )

                Spacer(modifier = Modifier.height(20.dp))

                // Category dropdown
                Box {
                    OutlinedButton(onClick = { expanded = true }) {
                        Text(selectedCategory, color = Color.White)
                    }
                    DropdownMenu(expanded = expanded, onDismissRequest = { expanded = false }) {
                        responses.keys.forEach { category ->
                            DropdownMenuItem(
                                text = { Text(category) },
                                onClick = {
                                    selectedCategory = category
                                    expanded = false
                                }
                            )
                        }
                    }
                }

                Spacer(modifier = Modifier.height(25.dp))

                // Button
                ExpensiveButton(
                    onClick = {
                        normalMeaning =
                            "üëâ Input: ${userInput.ifEmpty { "‡§ï‡•Å‡§õ ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ø‡§ñ‡§æ üòÖ" }}"

                        // Detect emoji
                        var categoryFromEmoji: String? = null
                        for ((emoji, cat) in emojiMap) {
                            if (userInput.contains(emoji)) {
                                categoryFromEmoji = cat
                                break
                            }
                        }

                        val finalCategory =
                            categoryFromEmoji ?: selectedCategory

                        doubleMeaning = "üîû Hidden Dirty: " +
                                responses[finalCategory]!![Random.nextInt(responses[finalCategory]!!.size)]
                    }
                )

                Spacer(modifier = Modifier.height(40.dp))

                if (normalMeaning.isNotEmpty()) {
                    MeaningCard("üìù Input", normalMeaning, Color(0xFF00E676))
                }

                if (doubleMeaning.isNotEmpty()) {
                    MeaningCard("üî• Dirty Output", doubleMeaning, Color(0xFFFF3D00))
                }
            }
        }
    }
}
